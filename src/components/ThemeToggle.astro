---
import { Icon } from "astro-icon";

export interface Theme {
  mode: "light" | "dark";
  icon: string;
}

const themes: Theme[] = [
  { mode: "light", icon: "theme/sun" },
  { mode: "dark", icon: "theme/moon" },
];
---

<button id="theme-toggle">
  {
    themes.map((theme) => (
      <div id={`icon-theme-${theme.mode}`}>
        <Icon
          name={theme.icon}
          class="w-8 hover:text-nord10 dark:hover:text-nord7 duration-300"
        />
        <span class="sr-only">{`Use ${theme.mode} theme`}</span>
      </div>
    ))
  }
</button>

<script is:inline>
  const themes = ["light", "dark"];
  const button = document.querySelector("#theme-toggle");

  const getThemeCurrent = () =>
    document.documentElement.classList.contains("dark") ? "dark" : "light";

  const getThemeNext = () => {
    const themeCurrent = getThemeCurrent();
    const indexThemeCurrent = themes.indexOf(themeCurrent);
    return themes[(indexThemeCurrent + 1) % themes.length];
  };

  const updateIcon = () => {
    const themeCurrent = getThemeCurrent();
    const themeNext = getThemeNext();
    document
      .querySelector(`#icon-theme-${themeCurrent}`)
      .classList.add("hidden");
    document
      .querySelector(`#icon-theme-${themeNext}`)
      .classList.remove("hidden");
  };

  button.addEventListener("click", () => {
    const themeCurrent = getThemeCurrent();
    const themeNext = getThemeNext();
    document.documentElement.classList.remove(themeCurrent);
    document.documentElement.classList.add(themeNext);
    localStorage.setItem("theme", themeNext);
    updateIcon();
  });

  updateIcon();
</script>
